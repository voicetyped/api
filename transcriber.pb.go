// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: transcriber.proto

package transcriberv1

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates the type of speech event.
type SpeechEventType int32

const (
	// No speech event specified.
	SpeechEventType_SPEECH_EVENT_TYPE_UNSPECIFIED SpeechEventType = 0
	// This event indicates that the server has detected the end of the user's
	// speech utterance and expects no additional speech. Therefore, the server
	// will not process additional audio and will close the gRPC bidirectional
	// stream. This event is only sent if there was a force cutoff due to
	// silence being detected early.
	SpeechEventType_SPEECH_ACTIVITY_END_OF_SINGLE_UTTERANCE SpeechEventType = 1
	// This event indicates that the server has detected the beginning of human
	// voice activity in the stream. This event can be returned multiple times
	// if speech starts and stops repeatedly throughout the stream. This event
	// is only sent if `voice_activity_events` is set to true.
	SpeechEventType_SPEECH_ACTIVITY_BEGIN SpeechEventType = 2
	// This event indicates that the end of human voice
	// activity in the stream. It is mostly because of a long duration of silence.
	// This event can be returned multiple times or sent multiple times by the client
	// to get a final transcription of the streamed data.
	SpeechEventType_SPEECH_ACTIVITY_END SpeechEventType = 3
	// This event is sent by the client to the server requesting for some provisional
	// results as the server buffers the stream. This event can be sent multiple times
	// throught the transcription process to get near realtime feedback with provisional output
	SpeechEventType_SPEECH_ACTIVITY_REQUEST_PROVISIONAL SpeechEventType = 4
)

// Enum value maps for SpeechEventType.
var (
	SpeechEventType_name = map[int32]string{
		0: "SPEECH_EVENT_TYPE_UNSPECIFIED",
		1: "SPEECH_ACTIVITY_END_OF_SINGLE_UTTERANCE",
		2: "SPEECH_ACTIVITY_BEGIN",
		3: "SPEECH_ACTIVITY_END",
		4: "SPEECH_ACTIVITY_REQUEST_PROVISIONAL",
	}
	SpeechEventType_value = map[string]int32{
		"SPEECH_EVENT_TYPE_UNSPECIFIED":           0,
		"SPEECH_ACTIVITY_END_OF_SINGLE_UTTERANCE": 1,
		"SPEECH_ACTIVITY_BEGIN":                   2,
		"SPEECH_ACTIVITY_END":                     3,
		"SPEECH_ACTIVITY_REQUEST_PROVISIONAL":     4,
	}
)

func (x SpeechEventType) Enum() *SpeechEventType {
	p := new(SpeechEventType)
	*p = x
	return p
}

func (x SpeechEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeechEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_transcriber_proto_enumTypes[0].Descriptor()
}

func (SpeechEventType) Type() protoreflect.EnumType {
	return &file_transcriber_proto_enumTypes[0]
}

func (x SpeechEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeechEventType.Descriptor instead.
func (SpeechEventType) EnumDescriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{0}
}

// Indicates the expected quality of transcription.
// follows this law :-> you can control any two quality, speed and price
type TranscribeConfig_Quality int32

const (
	// Here we value the speed of transcription, anything goes
	TranscribeConfig_LOW TranscribeConfig_Quality = 0
	// This is the default with a good balance on speed and accuracy of the transcription
	TranscribeConfig_MEDIUM TranscribeConfig_Quality = 1
	// The best available quality is what we care about, throw all the available resources to fullfil this goal.
	TranscribeConfig_HIGH TranscribeConfig_Quality = 2
)

// Enum value maps for TranscribeConfig_Quality.
var (
	TranscribeConfig_Quality_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
	}
	TranscribeConfig_Quality_value = map[string]int32{
		"LOW":    0,
		"MEDIUM": 1,
		"HIGH":   2,
	}
)

func (x TranscribeConfig_Quality) Enum() *TranscribeConfig_Quality {
	p := new(TranscribeConfig_Quality)
	*p = x
	return p
}

func (x TranscribeConfig_Quality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TranscribeConfig_Quality) Descriptor() protoreflect.EnumDescriptor {
	return file_transcriber_proto_enumTypes[1].Descriptor()
}

func (TranscribeConfig_Quality) Type() protoreflect.EnumType {
	return &file_transcriber_proto_enumTypes[1]
}

func (x TranscribeConfig_Quality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TranscribeConfig_Quality.Descriptor instead.
func (TranscribeConfig_Quality) EnumDescriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{1, 0}
}

// The encoding of the audio data sent in the request.
//
// All encodings support only 1 channel (mono) audio, unless the
// `audio_channel_count` and `enable_separate_recognition_per_channel` fields
// are set.
//
// For best results, the audio source should be captured and transmitted using
// a lossless encoding (`FLAC` or `LINEAR16`). The accuracy of the speech
// recognition can be reduced if lossy codecs are used to capture or transmit
// audio, particularly if background noise is present. Lossy codecs include
// `MULAW`, `AMR`, `AMR_WB`, `OGG_OPUS`, `SPEEX_WITH_HEADER_BYTE`, `MP3`,
// and `WEBM_OPUS`.
//
// The `FLAC` and `WAV` audio file formats include a header that describes the
// included audio content. You can request recognition for `WAV` files that
// contain either `LINEAR16` or `MULAW` encoded audio.
// If you send `FLAC` or `WAV` audio file format in
// your request, you do not need to specify an `AudioEncoding`; the audio
// encoding format is determined from the file header. If you specify
// an `AudioEncoding` when you send  send `FLAC` or `WAV` audio, the
// encoding configuration must match the encoding described in the audio
// header; otherwise the request returns an
// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] error
// code.
type TranscribeConfig_AudioEncoding int32

const (
	// Not specified.
	TranscribeConfig_ENCODING_UNSPECIFIED TranscribeConfig_AudioEncoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	TranscribeConfig_LINEAR16 TranscribeConfig_AudioEncoding = 1
	// `FLAC` (Free Lossless Audio
	// Codec) is the recommended encoding because it is
	// lossless--therefore recognition is not compromised--and
	// requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
	// encoding supports 16-bit and 24-bit samples, however, not all fields in
	// `STREAMINFO` are supported.
	TranscribeConfig_FLAC TranscribeConfig_AudioEncoding = 2
	// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
	TranscribeConfig_MULAW TranscribeConfig_AudioEncoding = 3
	// Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
	TranscribeConfig_AMR TranscribeConfig_AudioEncoding = 4
	// Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
	TranscribeConfig_AMR_WB TranscribeConfig_AudioEncoding = 5
	// Opus encoded audio frames in Ogg container
	// ([OggOpus](https://wiki.xiph.org/OggOpus)).
	// `sample_rate_hertz` must be one of 8000, 12000, 16000, 24000, or 48000.
	TranscribeConfig_OGG_OPUS TranscribeConfig_AudioEncoding = 6
	// Although the use of lossy encodings is not recommended, if a very low
	// bitrate encoding is required, `OGG_OPUS` is highly preferred over
	// Speex encoding. The [Speex](https://speex.org/)  encoding supported by
	// Cloud Speech API has a header byte in each block, as in MIME type
	// `audio/x-speex-with-header-byte`.
	// It is a variant of the RTP Speex encoding defined in
	// [RFC 5574](https://tools.ietf.org/html/rfc5574).
	// The stream is a sequence of blocks, one block per RTP packet. Each block
	// starts with a byte containing the length of the block, in bytes, followed
	// by one or more frames of Speex data, padded to an integral number of
	// bytes (octets) as specified in RFC 5574. In other words, each RTP header
	// is replaced with a single byte containing the block length. Only Speex
	// wideband is supported. `sample_rate_hertz` must be 16000.
	TranscribeConfig_SPEEX_WITH_HEADER_BYTE TranscribeConfig_AudioEncoding = 7
	// Opus encoded audio frames in WebM container
	// ([OggOpus](https://wiki.xiph.org/OggOpus)). `sample_rate_hertz` must be
	// one of 8000, 12000, 16000, 24000, or 48000.
	TranscribeConfig_WEBM_OPUS TranscribeConfig_AudioEncoding = 9
	// Headerless 8-bit companded alaw samples.  used for audio compression in telecommunication systems. Like MULAW, it is commonly used in older telephony networks.
	TranscribeConfig_ALAW TranscribeConfig_AudioEncoding = 10
)

// Enum value maps for TranscribeConfig_AudioEncoding.
var (
	TranscribeConfig_AudioEncoding_name = map[int32]string{
		0:  "ENCODING_UNSPECIFIED",
		1:  "LINEAR16",
		2:  "FLAC",
		3:  "MULAW",
		4:  "AMR",
		5:  "AMR_WB",
		6:  "OGG_OPUS",
		7:  "SPEEX_WITH_HEADER_BYTE",
		9:  "WEBM_OPUS",
		10: "ALAW",
	}
	TranscribeConfig_AudioEncoding_value = map[string]int32{
		"ENCODING_UNSPECIFIED":   0,
		"LINEAR16":               1,
		"FLAC":                   2,
		"MULAW":                  3,
		"AMR":                    4,
		"AMR_WB":                 5,
		"OGG_OPUS":               6,
		"SPEEX_WITH_HEADER_BYTE": 7,
		"WEBM_OPUS":              9,
		"ALAW":                   10,
	}
)

func (x TranscribeConfig_AudioEncoding) Enum() *TranscribeConfig_AudioEncoding {
	p := new(TranscribeConfig_AudioEncoding)
	*p = x
	return p
}

func (x TranscribeConfig_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TranscribeConfig_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_transcriber_proto_enumTypes[2].Descriptor()
}

func (TranscribeConfig_AudioEncoding) Type() protoreflect.EnumType {
	return &file_transcriber_proto_enumTypes[2]
}

func (x TranscribeConfig_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TranscribeConfig_AudioEncoding.Descriptor instead.
func (TranscribeConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{1, 1}
}

type AudioFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the audio the audio format sampling rate for server to understand
	SamplingRate int32 `protobuf:"varint,1,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	// Defines the audio format sample size in bits for server to understand how to handle file
	SampleSizeInBits int32 `protobuf:"varint,2,opt,name=sample_size_in_bits,json=sampleSizeInBits,proto3" json:"sample_size_in_bits,omitempty"`
	// Defines the audio format channel count
	ChannelCount int32 `protobuf:"varint,3,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
	// Defines the number of samples in the file, this is only useful when processing a file.
	FrameSize int32 `protobuf:"varint,4,opt,name=frame_size,json=frameSize,proto3" json:"frame_size,omitempty"`
	// Defines the audio format frame rate
	FrameRate int32 `protobuf:"varint,5,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// Defines weather the bytes in the audio file are big endian
	IsBigEndian bool `protobuf:"varint,6,opt,name=is_big_endian,json=isBigEndian,proto3" json:"is_big_endian,omitempty"`
}

func (x *AudioFormat) Reset() {
	*x = AudioFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFormat) ProtoMessage() {}

func (x *AudioFormat) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFormat.ProtoReflect.Descriptor instead.
func (*AudioFormat) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{0}
}

func (x *AudioFormat) GetSamplingRate() int32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *AudioFormat) GetSampleSizeInBits() int32 {
	if x != nil {
		return x.SampleSizeInBits
	}
	return 0
}

func (x *AudioFormat) GetChannelCount() int32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

func (x *AudioFormat) GetFrameSize() int32 {
	if x != nil {
		return x.FrameSize
	}
	return 0
}

func (x *AudioFormat) GetFrameRate() int32 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

func (x *AudioFormat) GetIsBigEndian() bool {
	if x != nil {
		return x.IsBigEndian
	}
	return false
}

// Configuration at the start of streaming request
type TranscribeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the quality with which our transcription is performed
	QualityType TranscribeConfig_Quality `protobuf:"varint,1,opt,name=quality_type,json=qualityType,proto3,enum=apis.TranscribeConfig_Quality" json:"quality_type,omitempty"`
	// Encoding of audio data sent in all `RecognitionAudio` messages.
	// This field is optional for `FLAC` and `WAV` audio files and required
	// for all other audio formats.
	Encoding TranscribeConfig_AudioEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=apis.TranscribeConfig_AudioEncoding" json:"encoding,omitempty"`
	// Defines the audio format settings to be utilized in defining the file type
	AudioFormat *AudioFormat `protobuf:"bytes,3,opt,name=audioFormat,proto3" json:"audioFormat,omitempty"`
}

func (x *TranscribeConfig) Reset() {
	*x = TranscribeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeConfig) ProtoMessage() {}

func (x *TranscribeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeConfig.ProtoReflect.Descriptor instead.
func (*TranscribeConfig) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{1}
}

func (x *TranscribeConfig) GetQualityType() TranscribeConfig_Quality {
	if x != nil {
		return x.QualityType
	}
	return TranscribeConfig_LOW
}

func (x *TranscribeConfig) GetEncoding() TranscribeConfig_AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return TranscribeConfig_ENCODING_UNSPECIFIED
}

func (x *TranscribeConfig) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

// Word-specific information for recognized words.
type VoiceText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The word corresponding to this set of information.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the recognized words are
	// correct.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// A distinct label is assigned for every speaker within the audio. This field
	// specifies which one of those speakers was detected to have spoken this
	// word.
	SpeakerLabel string `protobuf:"bytes,3,opt,name=speaker_label,json=speakerLabel,proto3" json:"speaker_label,omitempty"`
	// A label to show which language the text/data shared is in. The value can be
	// blank if the system is not able to determine the language of the text.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *VoiceText) Reset() {
	*x = VoiceText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceText) ProtoMessage() {}

func (x *VoiceText) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceText.ProtoReflect.Descriptor instead.
func (*VoiceText) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{2}
}

func (x *VoiceText) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *VoiceText) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *VoiceText) GetSpeakerLabel() string {
	if x != nil {
		return x.SpeakerLabel
	}
	return ""
}

func (x *VoiceText) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// `TranscribeResponse` is the only message returned to the client.
// A series of zero or more `TranscribeResponse`
// messages are streamed back to the client. If there is no recognizable
// audio then no messages are streamed back to the client.
//
//   - In each response, only one of these fields will be set:
//     `error`,
//     `speech_event_type`, or
//     one or more (repeated) `results`.
type TranscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This repeated list contains zero or more results that
	// correspond to consecutive portions of the audio currently being processed.
	// It contains zero or one results (the interim results).
	Results []*VoiceText `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
	// Indicates the type of speech event.
	SpeechEventType SpeechEventType `protobuf:"varint,3,opt,name=speech_event_type,json=speechEventType,proto3,enum=apis.SpeechEventType" json:"speech_event_type,omitempty"`
	// Time offset between the beginning of the audio and event emission.
	SpeechEventOffset *duration.Duration `protobuf:"bytes,7,opt,name=speech_event_offset,json=speechEventOffset,proto3" json:"speech_event_offset,omitempty"`
	Provisional       bool               `protobuf:"varint,8,opt,name=provisional,proto3" json:"provisional,omitempty"`
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{3}
}

func (x *TranscribeResponse) GetResults() []*VoiceText {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TranscribeResponse) GetSpeechEventType() SpeechEventType {
	if x != nil {
		return x.SpeechEventType
	}
	return SpeechEventType_SPEECH_EVENT_TYPE_UNSPECIFIED
}

func (x *TranscribeResponse) GetSpeechEventOffset() *duration.Duration {
	if x != nil {
		return x.SpeechEventOffset
	}
	return nil
}

func (x *TranscribeResponse) GetProvisional() bool {
	if x != nil {
		return x.Provisional
	}
	return false
}

// Request message for the
// [TranscribeRequest] message used to configure a request stream, send audio and any control signals in between.
type TranscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*TranscribeRequest_Configuration
	//	*TranscribeRequest_SpeechEventType
	//	*TranscribeRequest_Audio
	Request isTranscribeRequest_Request `protobuf_oneof:"request"`
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{4}
}

func (m *TranscribeRequest) GetRequest() isTranscribeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *TranscribeRequest) GetConfiguration() *TranscribeConfig {
	if x, ok := x.GetRequest().(*TranscribeRequest_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (x *TranscribeRequest) GetSpeechEventType() SpeechEventType {
	if x, ok := x.GetRequest().(*TranscribeRequest_SpeechEventType); ok {
		return x.SpeechEventType
	}
	return SpeechEventType_SPEECH_EVENT_TYPE_UNSPECIFIED
}

func (x *TranscribeRequest) GetAudio() []byte {
	if x, ok := x.GetRequest().(*TranscribeRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isTranscribeRequest_Request interface {
	isTranscribeRequest_Request()
}

type TranscribeRequest_Configuration struct {
	// Options to customize transcription service
	Configuration *TranscribeConfig `protobuf:"bytes,1,opt,name=configuration,proto3,oneof"`
}

type TranscribeRequest_SpeechEventType struct {
	// Indicates the type of speech event.
	SpeechEventType SpeechEventType `protobuf:"varint,3,opt,name=speech_event_type,json=speechEventType,proto3,enum=apis.SpeechEventType,oneof"`
}

type TranscribeRequest_Audio struct {
	// Inline audio bytes to be Recognized.
	// Maximum size for this field is 15 KB per request.
	Audio []byte `protobuf:"bytes,5,opt,name=audio,proto3,oneof"`
}

func (*TranscribeRequest_Configuration) isTranscribeRequest_Request() {}

func (*TranscribeRequest_SpeechEventType) isTranscribeRequest_Request() {}

func (*TranscribeRequest_Audio) isTranscribeRequest_Request() {}

type GptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	History map[string]*any1.Any `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GptRequest) Reset() {
	*x = GptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GptRequest) ProtoMessage() {}

func (x *GptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GptRequest.ProtoReflect.Descriptor instead.
func (*GptRequest) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{5}
}

func (x *GptRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GptRequest) GetHistory() map[string]*any1.Any {
	if x != nil {
		return x.History
	}
	return nil
}

type GptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string               `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Extras   map[string]*any1.Any `protobuf:"bytes,2,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GptResponse) Reset() {
	*x = GptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcriber_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GptResponse) ProtoMessage() {}

func (x *GptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transcriber_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GptResponse.ProtoReflect.Descriptor instead.
func (*GptResponse) Descriptor() ([]byte, []int) {
	return file_transcriber_proto_rawDescGZIP(), []int{6}
}

func (x *GptResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *GptResponse) GetExtras() map[string]*any1.Any {
	if x != nil {
		return x.Extras
	}
	return nil
}

var File_transcriber_proto protoreflect.FileDescriptor

var file_transcriber_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x70, 0x69, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x69, 0x67, 0x45, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x22,
	0x9d, 0x03, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x28,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x31, 0x36,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x55, 0x4c, 0x41, 0x57, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x52, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x52, 0x5f, 0x57, 0x42, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x47, 0x47, 0x5f, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x50,
	0x45, 0x45, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x4d, 0x5f, 0x4f,
	0x50, 0x55, 0x53, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4c, 0x41, 0x57, 0x10, 0x0a, 0x22,
	0x80, 0x01, 0x0a, 0x09, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x47, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x47, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x50, 0x0a, 0x0c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x47, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x4f, 0x0a, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xbe, 0x01, 0x0a, 0x0f, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x55, 0x54, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x50, 0x45,
	0x45, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x32, 0x8e, 0x01, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x47, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x47, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x33, 0x0a, 0x1e,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50, 0x01,
	0x5a, 0x0f, 0x2e, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transcriber_proto_rawDescOnce sync.Once
	file_transcriber_proto_rawDescData = file_transcriber_proto_rawDesc
)

func file_transcriber_proto_rawDescGZIP() []byte {
	file_transcriber_proto_rawDescOnce.Do(func() {
		file_transcriber_proto_rawDescData = protoimpl.X.CompressGZIP(file_transcriber_proto_rawDescData)
	})
	return file_transcriber_proto_rawDescData
}

var file_transcriber_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_transcriber_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_transcriber_proto_goTypes = []interface{}{
	(SpeechEventType)(0),                // 0: apis.SpeechEventType
	(TranscribeConfig_Quality)(0),       // 1: apis.TranscribeConfig.Quality
	(TranscribeConfig_AudioEncoding)(0), // 2: apis.TranscribeConfig.AudioEncoding
	(*AudioFormat)(nil),                 // 3: apis.AudioFormat
	(*TranscribeConfig)(nil),            // 4: apis.TranscribeConfig
	(*VoiceText)(nil),                   // 5: apis.VoiceText
	(*TranscribeResponse)(nil),          // 6: apis.TranscribeResponse
	(*TranscribeRequest)(nil),           // 7: apis.TranscribeRequest
	(*GptRequest)(nil),                  // 8: apis.GptRequest
	(*GptResponse)(nil),                 // 9: apis.GptResponse
	nil,                                 // 10: apis.GptRequest.HistoryEntry
	nil,                                 // 11: apis.GptResponse.ExtrasEntry
	(*duration.Duration)(nil),           // 12: google.protobuf.Duration
	(*any1.Any)(nil),                    // 13: google.protobuf.Any
}
var file_transcriber_proto_depIdxs = []int32{
	1,  // 0: apis.TranscribeConfig.quality_type:type_name -> apis.TranscribeConfig.Quality
	2,  // 1: apis.TranscribeConfig.encoding:type_name -> apis.TranscribeConfig.AudioEncoding
	3,  // 2: apis.TranscribeConfig.audioFormat:type_name -> apis.AudioFormat
	5,  // 3: apis.TranscribeResponse.results:type_name -> apis.VoiceText
	0,  // 4: apis.TranscribeResponse.speech_event_type:type_name -> apis.SpeechEventType
	12, // 5: apis.TranscribeResponse.speech_event_offset:type_name -> google.protobuf.Duration
	4,  // 6: apis.TranscribeRequest.configuration:type_name -> apis.TranscribeConfig
	0,  // 7: apis.TranscribeRequest.speech_event_type:type_name -> apis.SpeechEventType
	10, // 8: apis.GptRequest.history:type_name -> apis.GptRequest.HistoryEntry
	11, // 9: apis.GptResponse.extras:type_name -> apis.GptResponse.ExtrasEntry
	13, // 10: apis.GptRequest.HistoryEntry.value:type_name -> google.protobuf.Any
	13, // 11: apis.GptResponse.ExtrasEntry.value:type_name -> google.protobuf.Any
	7,  // 12: apis.TranscriberService.Transcribe:input_type -> apis.TranscribeRequest
	8,  // 13: apis.TranscriberService.Prompt:input_type -> apis.GptRequest
	6,  // 14: apis.TranscriberService.Transcribe:output_type -> apis.TranscribeResponse
	9,  // 15: apis.TranscriberService.Prompt:output_type -> apis.GptResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_transcriber_proto_init() }
func file_transcriber_proto_init() {
	if File_transcriber_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transcriber_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcriber_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transcriber_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TranscribeRequest_Configuration)(nil),
		(*TranscribeRequest_SpeechEventType)(nil),
		(*TranscribeRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transcriber_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transcriber_proto_goTypes,
		DependencyIndexes: file_transcriber_proto_depIdxs,
		EnumInfos:         file_transcriber_proto_enumTypes,
		MessageInfos:      file_transcriber_proto_msgTypes,
	}.Build()
	File_transcriber_proto = out.File
	file_transcriber_proto_rawDesc = nil
	file_transcriber_proto_goTypes = nil
	file_transcriber_proto_depIdxs = nil
}
