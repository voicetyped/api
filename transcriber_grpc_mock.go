// Code generated by MockGen. DO NOT EDIT.
// Source: transcriber_grpc.pb.go

// Package transcriberv1 is a generated GoMock package.
package transcriberv1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockTranscriberServiceClient is a mock of TranscriberServiceClient interface.
type MockTranscriberServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTranscriberServiceClientMockRecorder
}

// MockTranscriberServiceClientMockRecorder is the mock recorder for MockTranscriberServiceClient.
type MockTranscriberServiceClientMockRecorder struct {
	mock *MockTranscriberServiceClient
}

// NewMockTranscriberServiceClient creates a new mock instance.
func NewMockTranscriberServiceClient(ctrl *gomock.Controller) *MockTranscriberServiceClient {
	mock := &MockTranscriberServiceClient{ctrl: ctrl}
	mock.recorder = &MockTranscriberServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscriberServiceClient) EXPECT() *MockTranscriberServiceClientMockRecorder {
	return m.recorder
}

// Prompt mocks base method.
func (m *MockTranscriberServiceClient) Prompt(ctx context.Context, in *GptRequest, opts ...grpc.CallOption) (*GptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prompt", varargs...)
	ret0, _ := ret[0].(*GptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockTranscriberServiceClientMockRecorder) Prompt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockTranscriberServiceClient)(nil).Prompt), varargs...)
}

// Transcribe mocks base method.
func (m *MockTranscriberServiceClient) Transcribe(ctx context.Context, opts ...grpc.CallOption) (TranscriberService_TranscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transcribe", varargs...)
	ret0, _ := ret[0].(TranscriberService_TranscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transcribe indicates an expected call of Transcribe.
func (mr *MockTranscriberServiceClientMockRecorder) Transcribe(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transcribe", reflect.TypeOf((*MockTranscriberServiceClient)(nil).Transcribe), varargs...)
}

// MockTranscriberService_TranscribeClient is a mock of TranscriberService_TranscribeClient interface.
type MockTranscriberService_TranscribeClient struct {
	ctrl     *gomock.Controller
	recorder *MockTranscriberService_TranscribeClientMockRecorder
}

// MockTranscriberService_TranscribeClientMockRecorder is the mock recorder for MockTranscriberService_TranscribeClient.
type MockTranscriberService_TranscribeClientMockRecorder struct {
	mock *MockTranscriberService_TranscribeClient
}

// NewMockTranscriberService_TranscribeClient creates a new mock instance.
func NewMockTranscriberService_TranscribeClient(ctrl *gomock.Controller) *MockTranscriberService_TranscribeClient {
	mock := &MockTranscriberService_TranscribeClient{ctrl: ctrl}
	mock.recorder = &MockTranscriberService_TranscribeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscriberService_TranscribeClient) EXPECT() *MockTranscriberService_TranscribeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTranscriberService_TranscribeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTranscriberService_TranscribeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTranscriberService_TranscribeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTranscriberService_TranscribeClient) Recv() (*TranscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TranscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTranscriberService_TranscribeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTranscriberService_TranscribeClient) Send(arg0 *TranscribeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTranscriberService_TranscribeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockTranscriberService_TranscribeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTranscriberService_TranscribeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTranscriberService_TranscribeClient)(nil).Trailer))
}

// MockTranscriberServiceServer is a mock of TranscriberServiceServer interface.
type MockTranscriberServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTranscriberServiceServerMockRecorder
}

// MockTranscriberServiceServerMockRecorder is the mock recorder for MockTranscriberServiceServer.
type MockTranscriberServiceServerMockRecorder struct {
	mock *MockTranscriberServiceServer
}

// NewMockTranscriberServiceServer creates a new mock instance.
func NewMockTranscriberServiceServer(ctrl *gomock.Controller) *MockTranscriberServiceServer {
	mock := &MockTranscriberServiceServer{ctrl: ctrl}
	mock.recorder = &MockTranscriberServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscriberServiceServer) EXPECT() *MockTranscriberServiceServerMockRecorder {
	return m.recorder
}

// Prompt mocks base method.
func (m *MockTranscriberServiceServer) Prompt(arg0 context.Context, arg1 *GptRequest) (*GptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", arg0, arg1)
	ret0, _ := ret[0].(*GptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockTranscriberServiceServerMockRecorder) Prompt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockTranscriberServiceServer)(nil).Prompt), arg0, arg1)
}

// Transcribe mocks base method.
func (m *MockTranscriberServiceServer) Transcribe(arg0 TranscriberService_TranscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transcribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transcribe indicates an expected call of Transcribe.
func (mr *MockTranscriberServiceServerMockRecorder) Transcribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transcribe", reflect.TypeOf((*MockTranscriberServiceServer)(nil).Transcribe), arg0)
}

// mustEmbedUnimplementedTranscriberServiceServer mocks base method.
func (m *MockTranscriberServiceServer) mustEmbedUnimplementedTranscriberServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTranscriberServiceServer")
}

// mustEmbedUnimplementedTranscriberServiceServer indicates an expected call of mustEmbedUnimplementedTranscriberServiceServer.
func (mr *MockTranscriberServiceServerMockRecorder) mustEmbedUnimplementedTranscriberServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTranscriberServiceServer", reflect.TypeOf((*MockTranscriberServiceServer)(nil).mustEmbedUnimplementedTranscriberServiceServer))
}

// MockUnsafeTranscriberServiceServer is a mock of UnsafeTranscriberServiceServer interface.
type MockUnsafeTranscriberServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTranscriberServiceServerMockRecorder
}

// MockUnsafeTranscriberServiceServerMockRecorder is the mock recorder for MockUnsafeTranscriberServiceServer.
type MockUnsafeTranscriberServiceServerMockRecorder struct {
	mock *MockUnsafeTranscriberServiceServer
}

// NewMockUnsafeTranscriberServiceServer creates a new mock instance.
func NewMockUnsafeTranscriberServiceServer(ctrl *gomock.Controller) *MockUnsafeTranscriberServiceServer {
	mock := &MockUnsafeTranscriberServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTranscriberServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTranscriberServiceServer) EXPECT() *MockUnsafeTranscriberServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTranscriberServiceServer mocks base method.
func (m *MockUnsafeTranscriberServiceServer) mustEmbedUnimplementedTranscriberServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTranscriberServiceServer")
}

// mustEmbedUnimplementedTranscriberServiceServer indicates an expected call of mustEmbedUnimplementedTranscriberServiceServer.
func (mr *MockUnsafeTranscriberServiceServerMockRecorder) mustEmbedUnimplementedTranscriberServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTranscriberServiceServer", reflect.TypeOf((*MockUnsafeTranscriberServiceServer)(nil).mustEmbedUnimplementedTranscriberServiceServer))
}

// MockTranscriberService_TranscribeServer is a mock of TranscriberService_TranscribeServer interface.
type MockTranscriberService_TranscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockTranscriberService_TranscribeServerMockRecorder
}

// MockTranscriberService_TranscribeServerMockRecorder is the mock recorder for MockTranscriberService_TranscribeServer.
type MockTranscriberService_TranscribeServerMockRecorder struct {
	mock *MockTranscriberService_TranscribeServer
}

// NewMockTranscriberService_TranscribeServer creates a new mock instance.
func NewMockTranscriberService_TranscribeServer(ctrl *gomock.Controller) *MockTranscriberService_TranscribeServer {
	mock := &MockTranscriberService_TranscribeServer{ctrl: ctrl}
	mock.recorder = &MockTranscriberService_TranscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscriberService_TranscribeServer) EXPECT() *MockTranscriberService_TranscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockTranscriberService_TranscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockTranscriberService_TranscribeServer) Recv() (*TranscribeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TranscribeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTranscriberService_TranscribeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTranscriberService_TranscribeServer) Send(arg0 *TranscribeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockTranscriberService_TranscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTranscriberService_TranscribeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockTranscriberService_TranscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTranscriberService_TranscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTranscriberService_TranscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTranscriberService_TranscribeServer)(nil).SetTrailer), arg0)
}
