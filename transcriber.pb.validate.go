// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transcriber.proto

package transcriberv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AudioFormat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioFormat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioFormatMultiError, or
// nil if none found.
func (m *AudioFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SamplingRate

	// no validation rules for SampleSizeInBits

	// no validation rules for ChannelCount

	// no validation rules for FrameSize

	// no validation rules for FrameRate

	// no validation rules for IsBigEndian

	if len(errors) > 0 {
		return AudioFormatMultiError(errors)
	}

	return nil
}

// AudioFormatMultiError is an error wrapping multiple validation errors
// returned by AudioFormat.ValidateAll() if the designated constraints aren't met.
type AudioFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioFormatMultiError) AllErrors() []error { return m }

// AudioFormatValidationError is the validation error returned by
// AudioFormat.Validate if the designated constraints aren't met.
type AudioFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioFormatValidationError) ErrorName() string { return "AudioFormatValidationError" }

// Error satisfies the builtin error interface
func (e AudioFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioFormatValidationError{}

// Validate checks the field values on TranscribeConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TranscribeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranscribeConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranscribeConfigMultiError, or nil if none found.
func (m *TranscribeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TranscribeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QualityType

	// no validation rules for Encoding

	if all {
		switch v := interface{}(m.GetAudioFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TranscribeConfigValidationError{
					field:  "AudioFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TranscribeConfigValidationError{
					field:  "AudioFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudioFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TranscribeConfigValidationError{
				field:  "AudioFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TranscribeConfigMultiError(errors)
	}

	return nil
}

// TranscribeConfigMultiError is an error wrapping multiple validation errors
// returned by TranscribeConfig.ValidateAll() if the designated constraints
// aren't met.
type TranscribeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranscribeConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranscribeConfigMultiError) AllErrors() []error { return m }

// TranscribeConfigValidationError is the validation error returned by
// TranscribeConfig.Validate if the designated constraints aren't met.
type TranscribeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeConfigValidationError) ErrorName() string { return "TranscribeConfigValidationError" }

// Error satisfies the builtin error interface
func (e TranscribeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeConfigValidationError{}

// Validate checks the field values on VoiceText with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoiceText) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoiceText with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoiceTextMultiError, or nil
// if none found.
func (m *VoiceText) ValidateAll() error {
	return m.validate(true)
}

func (m *VoiceText) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Confidence

	// no validation rules for SpeakerLabel

	// no validation rules for Language

	if len(errors) > 0 {
		return VoiceTextMultiError(errors)
	}

	return nil
}

// VoiceTextMultiError is an error wrapping multiple validation errors returned
// by VoiceText.ValidateAll() if the designated constraints aren't met.
type VoiceTextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoiceTextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoiceTextMultiError) AllErrors() []error { return m }

// VoiceTextValidationError is the validation error returned by
// VoiceText.Validate if the designated constraints aren't met.
type VoiceTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceTextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceTextValidationError) ErrorName() string { return "VoiceTextValidationError" }

// Error satisfies the builtin error interface
func (e VoiceTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceTextValidationError{}

// Validate checks the field values on TranscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TranscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranscribeResponseMultiError, or nil if none found.
func (m *TranscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TranscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TranscribeResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TranscribeResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TranscribeResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SpeechEventType

	if all {
		switch v := interface{}(m.GetSpeechEventOffset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TranscribeResponseValidationError{
					field:  "SpeechEventOffset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TranscribeResponseValidationError{
					field:  "SpeechEventOffset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpeechEventOffset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TranscribeResponseValidationError{
				field:  "SpeechEventOffset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Provisional

	if len(errors) > 0 {
		return TranscribeResponseMultiError(errors)
	}

	return nil
}

// TranscribeResponseMultiError is an error wrapping multiple validation errors
// returned by TranscribeResponse.ValidateAll() if the designated constraints
// aren't met.
type TranscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranscribeResponseMultiError) AllErrors() []error { return m }

// TranscribeResponseValidationError is the validation error returned by
// TranscribeResponse.Validate if the designated constraints aren't met.
type TranscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeResponseValidationError) ErrorName() string {
	return "TranscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeResponseValidationError{}

// Validate checks the field values on TranscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TranscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranscribeRequestMultiError, or nil if none found.
func (m *TranscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TranscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Request.(type) {
	case *TranscribeRequest_Configuration:
		if v == nil {
			err := TranscribeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TranscribeRequestValidationError{
						field:  "Configuration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TranscribeRequestValidationError{
						field:  "Configuration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TranscribeRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TranscribeRequest_SpeechEventType:
		if v == nil {
			err := TranscribeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SpeechEventType
	case *TranscribeRequest_Audio:
		if v == nil {
			err := TranscribeRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Audio
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TranscribeRequestMultiError(errors)
	}

	return nil
}

// TranscribeRequestMultiError is an error wrapping multiple validation errors
// returned by TranscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type TranscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranscribeRequestMultiError) AllErrors() []error { return m }

// TranscribeRequestValidationError is the validation error returned by
// TranscribeRequest.Validate if the designated constraints aren't met.
type TranscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeRequestValidationError) ErrorName() string {
	return "TranscribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeRequestValidationError{}

// Validate checks the field values on QRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QRequestMultiError, or nil
// if none found.
func (m *QRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	{
		sorted_keys := make([]string, len(m.GetHistory()))
		i := 0
		for key := range m.GetHistory() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHistory()[key]
			_ = val

			// no validation rules for History[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QRequestValidationError{
							field:  fmt.Sprintf("History[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QRequestValidationError{
							field:  fmt.Sprintf("History[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QRequestValidationError{
						field:  fmt.Sprintf("History[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return QRequestMultiError(errors)
	}

	return nil
}

// QRequestMultiError is an error wrapping multiple validation errors returned
// by QRequest.ValidateAll() if the designated constraints aren't met.
type QRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QRequestMultiError) AllErrors() []error { return m }

// QRequestValidationError is the validation error returned by
// QRequest.Validate if the designated constraints aren't met.
type QRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QRequestValidationError) ErrorName() string { return "QRequestValidationError" }

// Error satisfies the builtin error interface
func (e QRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QRequestValidationError{}

// Validate checks the field values on QResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QResponseMultiError, or nil
// if none found.
func (m *QResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	{
		sorted_keys := make([]string, len(m.GetExtras()))
		i := 0
		for key := range m.GetExtras() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetExtras()[key]
			_ = val

			// no validation rules for Extras[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QResponseValidationError{
							field:  fmt.Sprintf("Extras[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QResponseValidationError{
							field:  fmt.Sprintf("Extras[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QResponseValidationError{
						field:  fmt.Sprintf("Extras[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return QResponseMultiError(errors)
	}

	return nil
}

// QResponseMultiError is an error wrapping multiple validation errors returned
// by QResponse.ValidateAll() if the designated constraints aren't met.
type QResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QResponseMultiError) AllErrors() []error { return m }

// QResponseValidationError is the validation error returned by
// QResponse.Validate if the designated constraints aren't met.
type QResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QResponseValidationError) ErrorName() string { return "QResponseValidationError" }

// Error satisfies the builtin error interface
func (e QResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QResponseValidationError{}
